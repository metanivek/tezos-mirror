# This file was automatically generated, do not edit.
# Edit file ci/bin/main.ml instead.

stages:
- start
- images
- sanity
- build
- test
- packaging

oc.docker:ci:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 90 minutes
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./images/ci_create_ci_images.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    ARCH: amd64
  artifacts:
    reports:
      dotenv: ci_image_tag.env

oc.docker:client-libs-dependencies:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_client_libs_dependencies_build.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
  artifacts:
    reports:
      dotenv: client_libs_dependencies_image_tag.env

oc.docker:rust-toolchain:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_rust_toolchain_build.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
  artifacts:
    reports:
      dotenv: rust_toolchain_image_tag.env

oc.docker:rust-sdk-bindings:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/docker_initialize.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/docker_rust_sdk_bindings_build.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
  artifacts:
    reports:
      dotenv: rust_sdk_bindings_image_tag.env

oc.docker:ci:arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.13.0
  stage: images
  tags:
  - gcp_arm64
  dependencies: []
  timeout: 90 minutes
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./images/ci_create_ci_images.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.7
    CI_DOCKER_HUB: "false"
    ARCH: arm64
  artifacts:
    reports:
      dotenv: ci_image_tag.env
  retry:
    max: 1
    when:
    - runner_system_failure

datadog_pipeline_trace:
  image: datadog/ci:v2.44.0
  stage: start
  tags:
  - gcp
  dependencies: []
  allow_failure: true
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - CI_MERGE_REQUEST_IID=${CI_MERGE_REQUEST_IID:-none}
  - DATADOG_SITE=datadoghq.eu datadog-ci tag --level pipeline --tags pipeline_type:$PIPELINE_TYPE
    --tags mr_number:$CI_MERGE_REQUEST_IID
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

sanity_ci:
  image: ${ci_image_name_protected}/build:amd64--master
  stage: sanity
  tags:
  - gcp
  needs: []
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - make --silent -C manifest check
  - make --silent -C ci check
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

docker:hadolint:
  image: hadolint/hadolint:2.12.0-alpine
  stage: sanity
  tags:
  - gcp
  rules:
  - when: always
  needs: []
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - hadolint build.Dockerfile
  - hadolint Dockerfile
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.ocaml_fmt:
  image: ${ci_image_name_protected}/build:amd64--master
  stage: sanity
  tags:
  - gcp
  rules:
  - when: always
  needs: []
  dependencies: []
  timeout: 60 minutes
  cache:
    key: dune_cache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/lint.sh --check-ocamlformat
  - dune build --profile=dev @fmt
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache

oc.semgrep:
  image: returntocorp/semgrep-agent:sha-c6cd7cf
  stage: sanity
  tags:
  - gcp
  rules:
  - when: always
  needs: []
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "OCaml code linting. For information on how to reproduce locally, check out
    scripts/semgrep/README.md"
  - sh ./scripts/semgrep/lint-all-ocaml-sources.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.misc_checks:
  image: ${ci_image_name_protected}/test:amd64--master
  stage: sanity
  tags:
  - gcp
  rules:
  - when: always
  needs: []
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/lint_misc_check.sh
  - scripts/check_wasm_pvm_regressions.sh check
  - etherlink/scripts/check_evm_store_migrations.sh check
  - ./scripts/check_rollup_node_sql_migrations.sh check
  - ./src/lib_dal_node/scripts/check_dal_store_migrations.sh check
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

check_jsonnet:
  image: ${jsonnet_image_name_protected}:master
  stage: sanity
  tags:
  - gcp
  rules:
  - when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - cd grafazos/
  - jb install github.com/grafana/grafonnet/gen/grafonnet-v11.1.0@1ce5aec
  - cd ../
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/lint.sh --check-jsonnet-format
  - scripts/lint.sh --check-jsonnet-lint
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

check_rust_fmt:
  image: ${rust_toolchain_image_name_protected}:master
  stage: sanity
  tags:
  - gcp
  rules:
  - when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/check-format-rust.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.build_arm64-released:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_full_unreleased.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/released-executables
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - src/proto_*/parameters/*.json
    when: on_success

oc.build_arm64-extra-dev:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_full_unreleased.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/dev-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build_arm64-extra-exp:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_full_unreleased.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/experimental-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build:static-x86_64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_static_binaries.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/octez-released-executables script-inputs/octez-experimental-executables
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    paths:
    - octez-binaries/$ARCH/*

oc.build:static-arm64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_static_binaries.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/octez-released-executables script-inputs/octez-experimental-executables
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    paths:
    - octez-binaries/$ARCH/*

oc.build_x86_64-released:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_full_unreleased.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/released-executables
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - src/proto_*/parameters/*.json
    when: on_success

oc.build_amd64-extra-dev:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_full_unreleased.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/dev-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe contrib/octez_injector_server/octez_injector_server.exe
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

oc.build_amd64-extra-exp:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_full_unreleased.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/experimental-executables
    BUILD_EXTRA: src/bin_tps_evaluation/main_tps_evaluation.exe src/bin_octogram/octogram_main.exe
      tezt/tests/main.exe contrib/octez_injector_server/octez_injector_server.exe
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
  artifacts:
    name: build-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-*
    - octez-teztale-*
    - src/proto_*/parameters/*.json
    - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    - _build/default/tezt/tests/main.exe
    - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    - etherlink-governance-observer
    when: on_success

wasm-runtime-check:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - etherlink/lib_wasm_runtime/lint.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

oc.build_kernels:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - when: on_success
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: kernels-sccache
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -f kernels.mk build
  - make -f etherlink.mk evm_kernel.wasm
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    CARGO_NET_OFFLINE: "false"
  artifacts:
    name: build-kernels-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - evm_kernel.wasm
    - smart-rollup-installer
    - sequenced_kernel.wasm
    - tx_kernel.wasm
    - tx_kernel_dal.wasm
    - dal_echo_kernel.wasm
    when: on_success

oc.build_dsn_node:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - when: on_success
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -f etherlink.mk octez-dsn-node
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    CARGO_NET_OFFLINE: "false"
  artifacts:
    name: build-dsn-node-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - octez-dsn-node
    when: on_success

oc.tezt:fetch-records:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  allow_failure: true
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune exec scripts/ci/update_records/update.exe -- --log-file tezt-fetch-records.log
    --from last-successful-schedule-extended-test --info
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/filter_corrupted_records.sh
  artifacts:
    expire_in: 4 hours
    paths:
    - tezt-fetch-records.log
    - tezt/records/*.json
    - tezt/records/*.json.broken
    when: always

build_octez_source:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/restrict_export_to_octez_source.sh
  - ./scripts/ci/create_octez_tarball.sh octez
  - mv octez.tar.bz2 ../
  - cd ../
  - tar xf octez.tar.bz2
  - cd octez/
  - eval $(opam env)
  - make octez
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G

etherlink.build:static-x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make evm-node-static
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: evm-binaries
    paths:
    - octez-evm-*
    - etherlink-*
    when: on_success

etherlink.build:static-arm64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: rust-targets-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_target
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make evm-node-static
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 2G
    OCTEZ_RUST_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rust_deps
    OCTEZ_RUSTZCASH_DEPS_TARGET_DIR: $CI_PROJECT_DIR/_target/rustzcash_deps
    OCTEZ_ETHERLINK_WASM_RUNTIME_TARGET_DIR: $CI_PROJECT_DIR/_target/etherlink_wasm_runtime
  artifacts:
    name: evm-binaries
    paths:
    - octez-evm-*
    - etherlink-*
    when: on_success

build-layer1-profiling:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_very_high_cpu
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - scripts/slim-mode.sh on
  - scripts/custom-flags.sh set -opaque
  - TEZOS_PPX_PROFILER=profiling make build OCTEZ_EXECUTABLES?="octez-node octez-client"
  - TEZOS_PPX_PROFILER=opentelemetry make build OCTEZ_EXECUTABLES?="octez-node octez-client"
  - mkdir -p octez-binaries/x86_64/
  - mv octez-node octez-binaries/x86_64/
  - mv octez-client octez-binaries/x86_64/
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    PROFILE: static
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
  artifacts:
    expire_in: 1 day
    paths:
    - ./octez-binaries/x86_64/octez-node
    - ./octez-binaries/x86_64/octez-client

opam:prepare:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 1 minute
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - git init _opam-repo-for-release
  - ./scripts/opam-prepare-repo.sh dev ./ ./_opam-repo-for-release
  - git -C _opam-repo-for-release add packages
  - git -C _opam-repo-for-release commit -m "tezos packages"
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    paths:
    - _opam-repo-for-release/

opam:all_6:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 6 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - tezos-protocol-genesis
      - tezos-protocol-demo-noops
      - tezos-protocol-demo-counter
      - tezos-protocol-alpha
      - tezos-protocol-023-PtSeouLo
      - tezos-benchmark
      - octez-shell-libs
      - octez-riscv-pvm
      - octez-proto-libs
      - octez-performance-metrics
      - octez-lib-upnp
      - octez-l2-libs
      - efunc_core
      - dal_node_migrations

opam:exec_6:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 6 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - octez-version
      - octez-protocol-compiler

opam:all_2:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 2 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - octez-smart-rollup-node-lib
      - octez-smart-rollup-node-PtParisB
      - octez-smart-rollup-node-PtNairob
      - octez-smart-rollup-node-PsQuebec
      - octez-smart-rollup-node-PsParisC
      - octez-smart-rollup-node-Proxford
      - octez-protocol-alpha-libs
      - octez-protocol-021-PsQuebec-libs
      - octez-protocol-020-PsParisC-libs
      - octez-protocol-019-PtParisB-libs
      - octez-protocol-018-Proxford-libs
      - octez-protocol-017-PtNairob-libs
      - octez-protocol-016-PtMumbai-libs
      - octez-protocol-000-Ps9mPmXa-libs
      - octez-injector
      - octez-baker-lib

opam:all_1:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 1 minute
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - octez-smart-rollup-node-alpha
      - octez-smart-rollup-node-PtSeouLo
      - octez-smart-rollup-node-PsRiotum
      - octez-protocol-023-PtSeouLo-libs
      - octez-protocol-022-PsRiotum-libs

opam:all_3:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 3 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - octez-rpc-process
      - octez-protocol-015-PtLimaPt-libs
      - octez-protocol-014-PtKathma-libs
      - octez-protocol-013-PtJakart-libs
      - octez-protocol-012-Psithaca-libs
      - octez-protocol-011-PtHangz2-libs
      - octez-protocol-010-PtGRANAD-libs
      - octez-protocol-009-PsFLoren-libs
      - octez-protocol-008-PtEdo2Zk-libs
      - octez-protocol-007-PsDELPH1-libs
      - octez-protocol-006-PsCARTHA-libs
      - octez-protocol-005-PsBabyM1-libs
      - octez-protocol-004-Pt24m4xi-libs
      - octez-protocol-003-PsddFKi3-libs
      - octez-protocol-002-PsYLVpVv-libs
      - octez-protocol-001-PtCJ7pwo-libs

opam:exec_4:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 4 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - octez-signer

opam:all_4:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 4 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - tezos-protocol-007-PsDELPH1
      - tezos-protocol-006-PsCARTHA
      - tezos-protocol-005-PsBabyM1
      - tezos-protocol-005-PsBABY5H
      - tezos-protocol-004-Pt24m4xi
      - tezos-protocol-003-PsddFKi3
      - tezos-protocol-002-PsYLVpVv
      - tezos-protocol-001-PtCJ7pwo
      - tezos-protocol-000-Ps9mPmXa
      - tezos-dal-node-lib
      - tezos-client-genesis
      - tezos-client-demo-counter
      - octez-node-config
      - octez-crawler
      - octez-baking-common-lib

opam:exec_1:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 1 minute
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - octez-smart-rollup-node
      - octez-node
      - octez-dal-node
      - octez-codec
      - octez-client
      - octez-baker-PtSeouLo
      - octez-baker-PsRiotum
      - octez-baker
      - octez-accuser-PtSeouLo
      - octez-accuser-PsRiotum
      - octez-accuser

opam:all_5:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 5 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - tezos-protocol-022-PsRiotum
      - tezos-protocol-021-PsQuebec
      - tezos-protocol-020-PsParisC
      - tezos-protocol-019-PtParisB
      - tezos-protocol-018-Proxford
      - tezos-protocol-017-PtNairob
      - tezos-protocol-016-PtMumbai
      - tezos-protocol-015-PtLimaPt
      - tezos-protocol-014-PtKathma
      - tezos-protocol-013-PtJakart
      - tezos-protocol-012-Psithaca
      - tezos-protocol-011-PtHangz2
      - tezos-protocol-010-PtGRANAD
      - tezos-protocol-009-PsFLoren
      - tezos-protocol-008-PtEdoTez
      - tezos-protocol-008-PtEdo2Zk

opam:all_7:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: packaging
  tags:
  - gcp
  rules:
  - when: delayed
    start_in: 7 minutes
  needs:
  - oc.docker:ci:amd64
  - opam:prepare
  dependencies:
  - oc.docker:ci:amd64
  - opam:prepare
  timeout: 90 minutes
  cache:
  - key: opam-sccache
    paths:
    - $CI_PROJECT_DIR/_build/_sccache
    policy: pull-push
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - mkdir -p $CI_PROJECT_DIR/opam_logs
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - opam remote add dev-repo ./_opam-repo-for-release
  - opam install --yes ${package}.dev
  - opam reinstall --yes --with-test ${package}.dev
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  - ./scripts/ci/sccache-stop.sh
  variables:
    RUNTEZTALIAS: "true"
    SCCACHE_DIR: $CI_PROJECT_DIR/_build/_sccache
    SCCACHE_CACHE_SIZE: 5G
    SCCACHE_ERROR_LOG: $CI_PROJECT_DIR/opam_logs/sccache.log
    SCCACHE_IDLE_TIMEOUT: "0"
    CARGO_NET_OFFLINE: "false"
  artifacts:
    expire_in: 1 week
    paths:
    - opam_logs/
    when: always
  retry: 2
  parallel:
    matrix:
    - package:
      - tezt-tezos
      - tezos-openapi
      - tezos-dal-node-services
      - octez-rustzcash-deps
      - octez-rust-tezos-context
      - octez-rust-deps
      - octez-riscv-api
      - octez-protocol-compiler-compat
      - octez-libs
      - octez-lib-upnp-args
      - octez-internal-libs
      - octez-igd-next
      - octez-distributed-lwt-internal
      - octez-distributed-internal
      - octez-alcotezt
      - bls12-381

trigger:debian_repository_full:
  stage: test
  variables:
    PIPELINE_TYPE: schedule_extended_test-debian_repository_full
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/debian_repository_full.yml
    strategy: depend

trigger:rpm_repository_full:
  stage: test
  variables:
    PIPELINE_TYPE: schedule_extended_test-rpm_repository_full
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/rpm_repository_full.yml
    strategy: depend

trigger:homebrew:
  stage: test
  variables:
    PIPELINE_TYPE: schedule_extended_test-homebrew
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - when: always
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/homebrew.yml
    strategy: depend

trigger:base_images:
  stage: images
  variables:
    PIPELINE_TYPE: schedule_extended_test-base_images
    DOCKER_FORCE_BUILD: $DOCKER_FORCE_BUILD
  rules:
  - when: always
  needs: []
  trigger:
    include: .gitlab/ci/pipelines/base_images.yml
    strategy: depend

kaitai_checks:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -C ${CI_PROJECT_DIR} check-kaitai-struct-files || (echo 'Octez encodings
    and Kaitai files seem to be out of sync. You might need to run `make check-kaitai-struct-files`
    and commit the resulting diff.' ; false)
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
  artifacts:
    expire_in: 1 hour
    paths:
    - _build/default/client-libs/bin_codec_kaitai/codec.exe
    when: on_success

kaitai_e2e_checks:
  image: ${client_libs_dependencies_image_name}:${client_libs_dependencies_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  needs:
  - oc.docker:client-libs-dependencies
  - kaitai_checks
  dependencies:
  - oc.docker:client-libs-dependencies
  - kaitai_checks
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/install_build_deps.js.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./client-libs/kaitai-struct-files/scripts/kaitai_e2e.sh client-libs/kaitai-struct-files/files
    2>/dev/null
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.check_lift_limits_patch:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - '[ $(git apply --numstat src/bin_tps_evaluation/lift_limits.patch | cut -f3) =
    "src/proto_alpha/lib_protocol/main.ml" ]'
  - git apply src/bin_tps_evaluation/lift_limits.patch
  - dune build @src/proto_alpha/lib_protocol/check
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

oc.python_check:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/lint_misc_python_check.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.integration:compiler-rejections:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - dune build @runtest_rejections
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

oc.script:test-gen-genesis:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune build scripts/gen-genesis/gen_genesis.exe
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.script:snapshot_alpha_and_link:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/script:snapshot_alpha_and_link.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache

oc.script:test_octez_release_versions:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/test_octez_release_version.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.script:b58_prefix:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - poetry run pylint scripts/b58_prefix/b58_prefix.py --disable=missing-docstring
    --disable=invalid-name
  - poetry run pytest scripts/b58_prefix/test_b58_prefix.py
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.test-liquidity-baking-scripts:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./scripts/ci/test_liquidity_baking_scripts.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc:scripts:release_script_values:
  image: ${ci_image_name}/prebuild:${ci_image_tag}
  stage: test
  tags:
  - gcp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - scripts/ci/test_release_values.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

mir_unit:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - cargo test --manifest-path contrib/mir/Cargo.toml
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_NET_OFFLINE: "false"

mir_tzt:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - cargo run --manifest-path contrib/mir/Cargo.toml --bin tzt_runner tzt_reference_test_suite/*.tzt
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_NET_OFFLINE: "false"

test_sdk_rust:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -C sdk/rust check
  - make -C sdk/rust test
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

test_sdk_bindings:
  image: ${rust_sdk_bindings_image_name}:${rust_sdk_bindings_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  dependencies:
  - oc.docker:rust-sdk-bindings:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -C contrib/sdk-bindings check
  - make -C contrib/sdk-bindings test
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

test_kernels:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -f kernels.mk check
  - make -f kernels.mk test
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

test_etherlink_kernel:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -f etherlink.mk check
  - make -f etherlink.mk test
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

test_etherlink_firehose:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -C etherlink/firehose check
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

audit_riscv_deps:
  image: ${rust_toolchain_image_name_protected}:master
  stage: sanity
  tags:
  - gcp
  rules:
  - when: on_success
  needs: []
  dependencies: []
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -C src/riscv audit
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

check_riscv_kernels:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -C src/riscv CHECK_FLAGS= EXTRA_FLAGS='--no-default-features --features ci'
    check
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

test_evm_compatibility:
  image: ${rust_toolchain_image_name}:${rust_toolchain_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:rust-toolchain:amd64
  - oc.build_kernels
  dependencies:
  - oc.docker:rust-toolchain:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make -f etherlink.mk EVM_EVALUATION_FEATURES=disable-file-logs evm-evaluation-assessor
  - git clone --depth 1 --branch v14.1@etherlink https://github.com/functori/tests
    ethereum_tests
  - ./evm-evaluation-assessor --eth-tests ./ethereum_tests/ --resources ./etherlink/kernel_latest/evm_evaluation/resources/
    -c
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CC: clang
    NATIVE_TARGET: x86_64-unknown-linux-musl
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

ocaml-check:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - when: always
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
    key: dune_cache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - ./scripts/ci/take_ownership.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune build @check --stop-on-first-error
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - eval $(opam env)
  - dune cache trim --size=3GB
  variables:
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache

oc.unit:non-proto-x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make $MAKE_TARGETS
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    MAKE_TARGETS: test-nonproto-unit
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

oc.unit:etherlink-x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make $MAKE_TARGETS
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    MAKE_TARGETS: test-etherlink-unit
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

oc.unit:other-x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_high_cpu
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make $MAKE_TARGETS
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    MAKE_TARGETS: test-other-unit
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

oc.unit:proto-x86_64:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  - key: dune-build-cache-$CI_PIPELINE_ID
    paths:
    - $CI_PROJECT_DIR/_dune_cache
    policy: pull
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make $MAKE_TARGETS
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  - eval $(opam env)
  - dune cache trim --size=5GB
  variables:
    ARCH: x86_64
    MAKE_TARGETS: test-proto-unit
    DUNE_ARGS: -j 12
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
    DUNE_CACHE: enabled
    DUNE_CACHE_STORAGE_MODE: hardlink
    DUNE_CACHE_ROOT: $CI_PROJECT_DIR/_dune_cache
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 1 day
    paths:
    - test_results
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2

oc.unit:non-proto-arm64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:arm64
  - oc.build_arm64-released
  - oc.build_arm64-extra-dev
  - oc.build_arm64-extra-exp
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - make $MAKE_TARGETS
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    ARCH: arm64
    MAKE_TARGETS: test-nonproto-unit test-webassembly
    DUNE_ARGS: -j 12
    DISTRIBUTE_TESTS_TO_PARALLELS: "true"
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G
  artifacts:
    name: $CI_JOB_NAME-$CI_COMMIT_SHA-${ARCH}
    expire_in: 1 day
    paths:
    - test_results
    reports:
      junit: test_results/*.xml
    when: always
  retry: 2
  parallel: 2

oc.unit:webassembly-x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 20 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - make test-webassembly
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.unit:protocol_compiles:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  - . ./scripts/ci/sccache-start.sh
  script:
  - dune build @runtest_compile_protocol
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  - ./scripts/ci/sccache-stop.sh
  variables:
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
    SCCACHE_CACHE_SIZE: 5G

de.unit:x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest data-encoding
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

de.unit:arm64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - when: always
  needs:
  - oc.docker:ci:arm64
  - oc.build_arm64-released
  - oc.build_arm64-extra-dev
  - oc.build_arm64-extra-exp
  dependencies:
  - oc.docker:ci:arm64
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest data-encoding
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

resto.unit:x86_64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-dev
  - oc.build_amd64-extra-exp
  dependencies:
  - oc.docker:ci:amd64
  timeout: 10 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest resto
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

resto.unit:arm64:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp_arm64
  rules:
  - when: always
  needs:
  - oc.docker:ci:arm64
  - oc.build_arm64-released
  - oc.build_arm64-extra-dev
  - oc.build_arm64-extra-exp
  dependencies:
  - oc.docker:ci:arm64
  timeout: 10 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - eval $(opam env)
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - dune runtest resto
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'

oc.install_opam_noble:
  image: ocaml/opam:ubuntu-24.04
  stage: test
  tags:
  - gcp
  rules:
  - when: always
  dependencies: []
  allow_failure: true
  timeout: 2 hours
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./docs/introduction/install-opam.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    OPAMJOBS: "4"

oc.compile_sources_doc_deps:
  image: ${GCP_PROTECTED_REGISTRY}/${CI_PROJECT_NAMESPACE}/tezos/$IMAGE
  stage: test
  tags:
  - gcp_very_high_cpu
  rules:
  - when: always
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./docs/introduction/compile-sources-setup.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_HOME: /home/opam/.cargo
    CARGO_NET_OFFLINE: "false"
  parallel:
    matrix:
    - IMAGE:
      - debian:bookworm
      - ubuntu:noble

oc.compile_sources_doc:
  image: ${GCP_PROTECTED_REGISTRY}/${CI_PROJECT_NAMESPACE}/tezos/$IMAGE
  stage: test
  tags:
  - gcp_very_high_cpu_ramfs
  rules:
  - when: always
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - ./docs/introduction/compile-sources.sh tezos/tezos latest-release
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    CARGO_HOME: /home/opam/.cargo
    CARGO_NET_OFFLINE: "false"
  parallel:
    matrix:
    - IMAGE:
      - build-debian-bookworm:master
      - build-ubuntu-noble:master

tezt:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  timeout: 40 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --without-select-tezts "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    --without-select-tezts "${TESTS}" --color --log-buffer-size 5000 --log-file tezt.log
    --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files fail --junit
    ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records --job
    ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    --job-count ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn
    5_000_000_000 --keep-going --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag
    'dd_tags[tezt-tag.time_sensitive]=time_sensitive' --junit-tag 'dd_tags[tezt-tag.slow]=slow'
    --junit-tag 'dd_tags[tezt-tag.extra]=extra' --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure'
    --junit-tag 'dd_tags[tezt-tag.layer1]=layer1' --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2'
    --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink' --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: ""
    TESTS: /ci_disabled && /time_sensitive && /slow && /extra && /cloud && /flaky
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "6"
    TEZT_NO_NPX: "true"
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    - $JUNIT
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: $JUNIT
    when: always
  retry: 2
  parallel: 50

tezt-time-sensitive:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --without-select-tezts "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    --without-select-tezts "${TESTS}" --color --log-buffer-size 5000 --log-file tezt.log
    --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files fail --junit
    ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records --job
    ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    --job-count ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn
    5_000_000_000 --keep-going --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag
    'dd_tags[tezt-tag.time_sensitive]=time_sensitive' --junit-tag 'dd_tags[tezt-tag.slow]=slow'
    --junit-tag 'dd_tags[tezt-tag.extra]=extra' --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure'
    --junit-tag 'dd_tags[tezt-tag.layer1]=layer1' --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2'
    --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink' --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -time_sensitive
    TESTS: time_sensitive && /ci_disabled && /slow && /extra && /cloud
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "1"
    TEZT_NO_NPX: "true"
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    - $JUNIT
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: $JUNIT
    when: always
  retry: 2

tezt-slow:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --without-select-tezts "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    --without-select-tezts "${TESTS}" --color --log-buffer-size 5000 --log-file tezt.log
    --global-timeout 1800 --on-unknown-regression-files fail --junit ${JUNIT} --junit-mem-peak
    'dd_tags[memory.peak]' --from-record tezt/records --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1}
    --record tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json --job-count ${TEZT_PARALLEL}
    --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000 --keep-going
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -slow
    TESTS: slow && /ci_disabled && /time_sensitive && /extra && /cloud && not (file
      = src/proto_019_PtParisA/lib_protocol/test/integration/test_adaptive_issuance_launch.ml)
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "3"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always
  retry: 2
  parallel: 20

tezt-extra:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --without-select-tezts "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    --without-select-tezts "${TESTS}" --color --log-buffer-size 5000 --log-file tezt.log
    --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files fail --junit
    ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records --job
    ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    --job-count ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn
    5_000_000_000 --keep-going --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag
    'dd_tags[tezt-tag.time_sensitive]=time_sensitive' --junit-tag 'dd_tags[tezt-tag.slow]=slow'
    --junit-tag 'dd_tags[tezt-tag.extra]=extra' --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure'
    --junit-tag 'dd_tags[tezt-tag.layer1]=layer1' --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2'
    --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink' --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -extra
    TESTS: extra && /ci_disabled && /time_sensitive && /slow && /cloud && /flaky
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "6"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always
  retry: 2
  parallel: 10

tezt-flaky:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  allow_failure: true
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --without-select-tezts "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    --without-select-tezts "${TESTS}" --color --log-buffer-size 5000 --log-file tezt.log
    --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files fail --junit
    ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records --job
    ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    --job-count ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn
    5_000_000_000 --keep-going --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag
    'dd_tags[tezt-tag.time_sensitive]=time_sensitive' --junit-tag 'dd_tags[tezt-tag.slow]=slow'
    --junit-tag 'dd_tags[tezt-tag.extra]=extra' --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure'
    --junit-tag 'dd_tags[tezt-tag.layer1]=layer1' --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2'
    --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink' --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  - ./scripts/ci/merge_coverage.sh
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: -flaky
    TESTS: /ci_disabled && /time_sensitive && /slow && /extra && /cloud && flaky
    TEZT_RETRY: "3"
    TEZT_PARALLEL: "1"
    TEZT_NO_NPX: "true"
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
  artifacts:
    name: coverage-files-$CI_JOB_ID
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    - $JUNIT
    - $BISECT_FILE/$CI_JOB_NAME_SLUG.*
    reports:
      junit: $JUNIT
    when: always
  retry: 2

tezt:static-binaries:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build:static-x86_64-linux-binaries
  - oc.tezt:fetch-records
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build:static-x86_64-linux-binaries
  - oc.tezt:fetch-records
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - mv octez-binaries/x86_64/octez-* .
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --without-select-tezts "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    --without-select-tezts "${TESTS}" --color --log-buffer-size 5000 --log-file tezt.log
    --global-timeout 1800 --test-timeout 540 --on-unknown-regression-files fail --junit
    ${JUNIT} --junit-mem-peak 'dd_tags[memory.peak]' --from-record tezt/records --job
    ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --record tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    --job-count ${TEZT_PARALLEL} --retry ${TEZT_RETRY} --record-mem-peak --mem-warn
    5_000_000_000 --keep-going --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag
    'dd_tags[tezt-tag.time_sensitive]=time_sensitive' --junit-tag 'dd_tags[tezt-tag.slow]=slow'
    --junit-tag 'dd_tags[tezt-tag.extra]=extra' --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure'
    --junit-tag 'dd_tags[tezt-tag.layer1]=layer1' --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2'
    --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink' --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: ""
    TESTS: /ci_disabled && /time_sensitive && /slow && /extra && /cloud && cli &&
      /flaky
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "3"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always

tezt-riscv-slow-sequential:
  image: ${ci_image_name}/e2etest:${ci_image_tag}
  stage: test
  tags:
  - gcp_tezt
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  dependencies:
  - oc.docker:ci:amd64
  - oc.build_x86_64-released
  - oc.build_amd64-extra-exp
  - oc.build_amd64-extra-dev
  - oc.build_kernels
  - oc.build_dsn_node
  - oc.tezt:fetch-records
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - echo "TESTS=\"${TESTS}\" JUNIT=\"${JUNIT}\" CI_NODE_INDEX=\"${CI_NODE_INDEX}\"
    CI_NODE_TOTAL=\"${CI_NODE_TOTAL}\" TEZT_PARALLEL=\"${TEZT_PARALLEL}\" TEZT_VARIANT=\"${TEZT_VARIANT}\""
  - ./scripts/ci/tezt.sh --without-select-tezts "${TESTS}" --from-record tezt/records
    --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1} --list-tsv > selected_tezts.tsv
  - ./scripts/ci/exit_code.sh timeout -k 60 1860 ./scripts/ci/tezt.sh --send-junit
    --without-select-tezts "${TESTS}" --color --log-buffer-size 5000 --log-file tezt.log
    --global-timeout 1800 --on-unknown-regression-files fail --junit ${JUNIT} --junit-mem-peak
    'dd_tags[memory.peak]' --from-record tezt/records --job ${CI_NODE_INDEX:-1}/${CI_NODE_TOTAL:-1}
    --record tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json --job-count ${TEZT_PARALLEL}
    --retry ${TEZT_RETRY} --record-mem-peak --mem-warn 5_000_000_000 --keep-going
    --junit-tag 'dd_tags[tezt-tag.flaky]=flaky' --junit-tag 'dd_tags[tezt-tag.time_sensitive]=time_sensitive'
    --junit-tag 'dd_tags[tezt-tag.slow]=slow' --junit-tag 'dd_tags[tezt-tag.extra]=extra'
    --junit-tag 'dd_tags[tezt-tag.infrastructure]=infrastructure' --junit-tag 'dd_tags[tezt-tag.layer1]=layer1'
    --junit-tag 'dd_tags[tezt-tag.tezos2]=tezos2' --junit-tag 'dd_tags[tezt-tag.etherlink]=etherlink'
    --junit-tag 'dd_tags[tezt-tag.memory_hungry]=memory_hungry'
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  variables:
    JUNIT: tezt-junit.xml
    TEZT_VARIANT: ""
    TESTS: riscv_slow_sequential
    TEZT_RETRY: "1"
    TEZT_PARALLEL: "1"
    TEZT_NO_NPX: "true"
  artifacts:
    expire_in: 7 days
    paths:
    - selected_tezts.tsv
    - tezt.log
    - tezt-*.log
    - tezt-results-${CI_NODE_INDEX:-1}${TEZT_VARIANT}.json
    - $JUNIT
    reports:
      junit: $JUNIT
    when: always
  retry: 2

documentation:odoc:
  stage: start
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script: []
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    paths:
    - dummy

documentation:manuals:
  stage: start
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script: []
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    paths:
    - dummy

documentation:docgen:
  stage: start
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script: []
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    paths:
    - dummy

documentation:build_all:
  stage: start
  tags:
  - gcp
  dependencies: []
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script: []
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
  artifacts:
    paths:
    - dummy

documentation:linkcheck:
  image: ${ci_image_name}/test:${ci_image_tag}
  stage: test
  tags:
  - gcp
  rules:
  - when: on_success
  needs:
  - oc.docker:ci:amd64
  - documentation:manuals
  - documentation:docgen
  - documentation:build_all
  dependencies:
  - oc.docker:ci:amd64
  - documentation:manuals
  - documentation:docgen
  - documentation:build_all
  allow_failure: true
  timeout: 60 minutes
  interruptible: false
  before_script:
  - . ./scripts/ci/datadog_send_job_info.sh
  - . ./scripts/version.sh
  - eval $(opam env)
  - . $HOME/.venv/bin/activate
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'before'
  script:
  - make -C docs redirectcheck
  - make -C docs linkcheck
  after_script:
  - . ./scripts/ci/datadog_send_job_cache_info.sh 'after'
