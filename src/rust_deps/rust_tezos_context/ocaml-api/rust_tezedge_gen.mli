(* Generated by ocaml-rs *)

open! Bigarray

(* file: lib.rs *)

type index
type context
type tree
type o_context_hash
type o_caml_tree_walker
type o_caml_depth = Eq of int | Le of int | Lt of int | Ge of int | Gt of int
type o_caml_order = Sorted | Undefined
type kind = Value | Tree
external index_init: string -> index = "index_init"
external index: context -> index = "index"
external context_init: index -> context = "context_init"
external commit: context -> int64 -> string -> string -> bytes = "commit"
external hash: context -> int64 -> string -> string -> bytes = "hash"
external exists: index -> 'a -> bool = "exists"
external checkout: index -> 'a -> context option = "checkout"
external find: context -> string list -> bytes option = "find"
external remove: context -> string list -> context = "remove"
external add: context -> string list -> 'a -> context = "add"
external mem_tree: context -> string list -> bool = "mem_tree"
external mem: context -> string list -> bool = "mem"
external find_tree: context -> string list -> tree option = "find_tree"
external list: context -> int option -> int option -> string list -> (string * tree) array = "list"
external length: context -> string list -> int = "length"
external add_tree: context -> string list -> tree -> context = "add_tree"
external make_tree_walker: tree -> o_caml_depth option -> string list -> 'b -> o_caml_tree_walker = "make_tree_walker"
external tree_walker_next: o_caml_tree_walker -> (string array * tree) option = "tree_walker_next"
external get_tree: context -> tree = "get_tree"
external tree_kind: tree -> kind = "tree_kind"
external tree_mem: tree -> string list -> bool = "tree_mem"
external tree_mem_tree: tree -> string list  -> bool = "tree_mem_tree"
external tree_find: tree -> string list -> bytes option = "tree_find"
external tree_find_tree: tree -> string list -> tree option = "tree_find_tree"
external tree_list: tree -> int option -> int option -> string list -> (string * tree) array = "tree_list"
external tree_length: tree -> string list -> int = "tree_length"
external tree_add: tree -> string list -> 'a -> tree = "tree_add"
external tree_add_tree: tree -> string list -> tree -> tree = "tree_add_tree"
external tree_remove: tree -> string list -> tree = "tree_remove"
external tree_is_empty: tree -> bool = "tree_is_empty"
external tree_empty: context -> tree = "tree_empty"
external tree_to_value: tree -> bytes option = "tree_to_value"
external tree_of_value: context -> bytes -> tree = "tree_of_value"
external tree_hash: tree -> bytes = "tree_hash"
external tree_equal: tree -> tree -> bool = "tree_equal"
external export_snapshot: string -> 'a -> string -> unit = "export_snapshot"
