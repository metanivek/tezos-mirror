
./octez-client rpc list

Available services:
  
  - POST /
      JSONRPC endpoint 
  - GET /configuration
      configuration 
  + evm/
    - GET /evm/blueprint/<uint63>
        Fetch the contents of a blueprint 
    - GET /evm/blueprints
        Watch for new blueprints 
    - GET /evm/blueprints/range
        Fetch a sequence of consecutive blueprints, starting from (and
        containing at least the blueprint for) a given level 
    - GET /evm/messages
        Watch for new messages 
    - GET /evm/smart_rollup_address
        Get the address of the smart rollup hosting the chain 
    - GET /evm/time_between_blocks
        Get the maximum time between two blocks 
  - GET /health_check
      Assess the health of the RPC server 
  + tezlink/
    + chains/<chain_id>/
      + blocks/<block_id>/
        + context/
          - GET /tezlink/chains/<chain_id>/blocks/<block_id>/context/constants
              All constants 
          + contracts/<contract_id>/
            - GET /tezlink/chains/<chain_id>/blocks/<block_id>/context/contracts/<contract_id>/balance
                The spendable balance of a contract (in mutez), also known as
                liquid balance. Corresponds to tez owned by the contract that
                are neither staked, nor in unstaked requests, nor in frozen
                bonds. Identical to the 'spendable' RPC. 
            - GET /tezlink/chains/<chain_id>/blocks/<block_id>/context/contracts/<contract_id>/counter
                Access the counter of a contract, if any. 
            - GET /tezlink/chains/<chain_id>/blocks/<block_id>/context/contracts/<contract_id>/manager_key
                Access the manager of an implicit contract. 
        - GET /tezlink/chains/<chain_id>/blocks/<block_id>/hash
            The block's hash, its unique identifier. 
        - GET /tezlink/chains/<chain_id>/blocks/<block_id>/header
            The whole block header. 
        - GET /tezlink/chains/<chain_id>/blocks/<block_id>/helpers/current_level
            Returns the level of the interrogated block, or the one of a
            block located `offset` blocks after it in the chain. For
            instance, the next block if `offset` is 1. The offset cannot be
            negative. 
        - POST /tezlink/chains/<chain_id>/blocks/<block_id>/helpers/scripts/simulate_operation
            Simulate running an operation at some future moment (based on the
            number of blocks given in the `latency` argument), and return the
            operation application result. The result is the same as
            run_operation except for the consumed gas, which depends on the
            contents of the cache at that future moment. This RPC estimates
            future gas consumption by trying to predict the state of the
            cache using some heuristics. 
        - GET /tezlink/chains/<chain_id>/blocks/<block_id>/protocols
            Current and next protocol. 
      - GET /tezlink/chains/<chain_id>/chain_id
          The chain unique identifier. 
    - GET /tezlink/describe
        RPCs documentation and input/output schema 
    - GET /tezlink/monitor/bootstrapped
        Wait for the node to have synchronized its chain with a few peers
        (configured by the node's administrator), streaming head updates that
        happen during the bootstrapping process, and closing the stream at
        the end. If the node was already bootstrapped, returns the current
        head immediately. 
    - GET /tezlink/monitor/heads/<chain_id>
        Monitor all blocks that are successfully validated and applied by the
        node and selected as the new head of the given chain. 
    - GET /tezlink/version
        Get information on the node version 
  - GET /version
      version 


Dynamic parameter description:
  
  <contract_id>
      A contract identifier encoded in b58check. 
  <block_id>
      A block identifier. This can take one of the following
      values:
	1.Block-hash - Hash in Base58Check notation.
	2.Alias - One of
      the following:'genesis/ head/ caboose/ savepoint/
      checkpoint'.
	3.Block-level - index(integer) in the chain.
	One can
      also specify the relative positions of block with respect to above
      three block identifiers. For ex. 'checkpoint~N' or checkpoint+N, where
      N is an integer, denotes the Nth block before(~) or after (+) the
      checkpoint. 
  <chain_id>
      A chain identifier. This is either a chain hash in Base58Check notation
      or a one the predefined aliases: 'main', 'test'. 
  uint63

Warning:
  Failed to acquire the protocol version from the node
  Did not find service: GET http://[HOST]:[PORT]/chains/main/blocks/head/protocols


./octez-client rpc list

Available services:
  
  + chains/<chain_id>/
    + blocks/<block_id>/
      + context/
        - GET /chains/<chain_id>/blocks/<block_id>/context/constants
            All constants 
        + contracts/<contract_id>/
          - GET /chains/<chain_id>/blocks/<block_id>/context/contracts/<contract_id>/balance
              The spendable balance of a contract (in mutez), also known as
              liquid balance. Corresponds to tez owned by the contract that
              are neither staked, nor in unstaked requests, nor in frozen
              bonds. Identical to the 'spendable' RPC. 
          - GET /chains/<chain_id>/blocks/<block_id>/context/contracts/<contract_id>/counter
              Access the counter of a contract, if any. 
          - GET /chains/<chain_id>/blocks/<block_id>/context/contracts/<contract_id>/manager_key
              Access the manager of an implicit contract. 
      - GET /chains/<chain_id>/blocks/<block_id>/hash
          The block's hash, its unique identifier. 
      - GET /chains/<chain_id>/blocks/<block_id>/header
          The whole block header. 
      - GET /chains/<chain_id>/blocks/<block_id>/helpers/current_level
          Returns the level of the interrogated block, or the one of a block
          located `offset` blocks after it in the chain. For instance, the
          next block if `offset` is 1. The offset cannot be negative. 
      - POST /chains/<chain_id>/blocks/<block_id>/helpers/scripts/simulate_operation
          Simulate running an operation at some future moment (based on the
          number of blocks given in the `latency` argument), and return the
          operation application result. The result is the same as
          run_operation except for the consumed gas, which depends on the
          contents of the cache at that future moment. This RPC estimates
          future gas consumption by trying to predict the state of the cache
          using some heuristics. 
      - GET /chains/<chain_id>/blocks/<block_id>/protocols
          Current and next protocol. 
    - GET /chains/<chain_id>/chain_id
        The chain unique identifier. 
  - GET /monitor/bootstrapped
      Wait for the node to have synchronized its chain with a few peers
      (configured by the node's administrator), streaming head updates that
      happen during the bootstrapping process, and closing the stream at the
      end. If the node was already bootstrapped, returns the current head
      immediately. 
  - GET /monitor/heads/<chain_id>
      Monitor all blocks that are successfully validated and applied by the
      node and selected as the new head of the given chain. 
  - GET /version
      Get information on the node version 


Dynamic parameter description:
  
  <contract_id>
      A contract identifier encoded in b58check. 
  <block_id>
      A block identifier. This can take one of the following
      values:
	1.Block-hash - Hash in Base58Check notation.
	2.Alias - One of
      the following:'genesis/ head/ caboose/ savepoint/
      checkpoint'.
	3.Block-level - index(integer) in the chain.
	One can
      also specify the relative positions of block with respect to above
      three block identifiers. For ex. 'checkpoint~N' or checkpoint+N, where
      N is an integer, denotes the Nth block before(~) or after (+) the
      checkpoint. 
  <chain_id>
      A chain identifier. This is either a chain hash in Base58Check notation
      or a one the predefined aliases: 'main', 'test'. 

