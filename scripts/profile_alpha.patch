From 480ed0cc216a7057e29565588c3490787e5cff82 Mon Sep 17 00:00:00 2001
From: Pierrick Couderc <pierrick.couderc@nomadic-labs.com>
Date: Wed, 15 Oct 2025 14:18:06 +0200
Subject: [PATCH 1/1] Profiler: patch Alpha

---
 src/proto_alpha/lib_protocol/apply.ml         | 17 ++--
 src/proto_alpha/lib_protocol/baking.ml        |  4 +-
 .../lib_protocol/delegate_cycles.ml           | 78 +++++++++++++++----
 src/proto_alpha/lib_protocol/dune             |  2 +
 src/proto_alpha/lib_protocol/init_storage.ml  | 36 +++++++--
 src/proto_alpha/lib_protocol/raw_context.ml   |  4 +-
 src/proto_alpha/lib_protocol/script_cache.ml  | 19 ++---
 .../lib_protocol/script_interpreter.ml        | 11 +--
 .../lib_protocol/script_ir_translator.ml      | 40 +++++-----
 9 files changed, 149 insertions(+), 62 deletions(-)

diff --git a/src/proto_alpha/lib_protocol/apply.ml b/src/proto_alpha/lib_protocol/apply.ml
index 0078267eca..a301359869 100644
--- a/src/proto_alpha/lib_protocol/apply.ml
+++ b/src/proto_alpha/lib_protocol/apply.ml
@@ -2497,7 +2497,11 @@ let apply_manager_operations ctxt ~payload_producer chain_id ~mempool_mode
     ~source ~operation contents_list =
   let open Lwt_result_syntax in
   let ctxt = if mempool_mode then Gas.reset_block_gas ctxt else ctxt in
-  let* ctxt, fees_updated_contents_list = take_fees ctxt contents_list in
+  let* ctxt, fees_updated_contents_list =
+    (take_fees
+       ctxt
+       contents_list [@profiler.record_s {verbosity = Notice} "take_fees"])
+  in
   let gas_cost_for_sig_check =
     let algo =
       Michelson_v1_gas.Cost_of.Interpreter.algo_of_public_key_hash source
@@ -2774,11 +2778,12 @@ let may_start_new_cycle ctxt =
   match Level.dawn_of_a_new_cycle ctxt with
   | None -> return (ctxt, [], [])
   | Some last_cycle ->
-      let* ctxt, balance_updates, deactivated =
-        Delegate.cycle_end ctxt last_cycle
-      in
-      let+ ctxt = Bootstrap.cycle_end ctxt last_cycle in
-      (ctxt, balance_updates, deactivated)
+      (let* ctxt, balance_updates, deactivated =
+         Delegate.cycle_end ctxt last_cycle
+       in
+       let+ ctxt = Bootstrap.cycle_end ctxt last_cycle in
+       (ctxt, balance_updates, deactivated))
+      [@profiler.record_s {verbosity = Notice} "delegate end cycle"]
 
 let apply_liquidity_baking_subsidy ctxt ~per_block_vote =
   let open Lwt_result_syntax in
diff --git a/src/proto_alpha/lib_protocol/baking.ml b/src/proto_alpha/lib_protocol/baking.ml
index 1388bc3ea7..ae55ed9ae2 100644
--- a/src/proto_alpha/lib_protocol/baking.ml
+++ b/src/proto_alpha/lib_protocol/baking.ml
@@ -110,7 +110,7 @@ type ordered_slots = {
 (* Slots returned by this function are assumed by consumers to be in increasing
    order, hence the use of [Slot.Range.rev_fold_es]. *)
 let attesting_rights (ctxt : t) level =
-  let consensus_committee_size = Constants.consensus_committee_size ctxt in
+  (let consensus_committee_size = Constants.consensus_committee_size ctxt in
   let all_bakers_attest_enabled =
     Attesting_power.check_all_bakers_attest_at_level ctxt level
   in
@@ -210,7 +210,7 @@ let attesting_rights (ctxt : t) level =
         map
     else map
   in
-  return (ctxt, map)
+  return (ctxt, map)) [@profiler.record_s {verbosity = Notice} "attesting_rights"]
 
 let incr_slot att_rights =
   let one = Attesting_power.make ~slots:1 ~stake:0L in
diff --git a/src/proto_alpha/lib_protocol/delegate_cycles.ml b/src/proto_alpha/lib_protocol/delegate_cycles.ml
index 2a0bdad18c..d208afc53b 100644
--- a/src/proto_alpha/lib_protocol/delegate_cycles.ml
+++ b/src/proto_alpha/lib_protocol/delegate_cycles.ml
@@ -229,42 +229,92 @@ let distribute_attesting_rewards ctxt last_cycle unrevealed_nonces =
 let cycle_end ctxt last_cycle =
   let open Lwt_result_syntax in
   (* attributing attesting rewards   *)
-  let* ctxt, unrevealed_nonces = Seed_storage.cycle_end ctxt last_cycle in
+  let* ctxt, unrevealed_nonces =
+    (Seed_storage.cycle_end
+       ctxt
+       last_cycle
+     [@profiler.record_s {verbosity = Notice} "seed storage cycle end"])
+  in
   let* ctxt, attesting_balance_updates =
-    distribute_attesting_rewards ctxt last_cycle unrevealed_nonces
+    (distribute_attesting_rewards
+       ctxt
+       last_cycle
+       unrevealed_nonces
+     [@profiler.record_s {verbosity = Notice} "distribute attesting rewards"])
   in
   (* Applying slashing related to expiring denunciations *)
   let* ctxt, slashing_balance_updates =
-    Delegate_slashed_deposits_storage.apply_and_clear_denunciations ctxt
+    (Delegate_slashed_deposits_storage.apply_and_clear_denunciations
+       ctxt
+     [@profiler.record_s {verbosity = Notice} "apply and clear denunciations"])
   in
   let new_cycle = Cycle_repr.add last_cycle 1 in
-  let*! ctxt = Already_denounced_storage.clear_outdated_cycle ctxt ~new_cycle in
+  let*! ctxt =
+    (Already_denounced_storage.clear_outdated_cycle
+       ctxt
+       ~new_cycle
+     [@profiler.record_s {verbosity = Notice} "clear outdated cycle"])
+  in
   let*! ctxt =
     Dal_already_denounced_storage.clear_outdated_cycle ctxt ~new_cycle
   in
   (* Deactivating delegates which didn't participate to consensus for too long *)
-  let* ctxt, deactivated_delegates = update_activity ctxt last_cycle in
+  let* ctxt, deactivated_delegates =
+    (update_activity
+       ctxt
+       last_cycle [@profiler.record_s {verbosity = Notice} "update activity"])
+  in
   (* Computing future staking rights *)
   let* ctxt =
-    Delegate_sampler.select_new_distribution_at_cycle_end ctxt ~new_cycle
+    (Delegate_sampler.select_new_distribution_at_cycle_end
+       ctxt
+       ~new_cycle
+     [@profiler.record_s
+       {verbosity = Notice} "select new distribution at cycle end"])
   in
   (* Activating consensus key for the cycle to come *)
-  let*! ctxt = Delegate_consensus_key.activate ctxt ~new_cycle in
+  let*! ctxt =
+    (Delegate_consensus_key.activate
+       ctxt
+       ~new_cycle
+     [@profiler.record_s {verbosity = Notice} "activate consensus key"])
+  in
   (* trying to unforbid delegates for the cycle to come. *)
   let* ctxt =
-    Forbidden_delegates_storage.update_at_cycle_end_after_slashing
-      ctxt
-      ~new_cycle
+    (Forbidden_delegates_storage.update_at_cycle_end_after_slashing
+       ctxt
+       ~new_cycle
+     [@profiler.record_s
+       {verbosity = Notice} "update at cycle end after slashing"])
   in
   (* clear deprecated cycles data.  *)
-  let* ctxt = Stake_storage.clear_at_cycle_end ctxt ~new_cycle in
-  let* ctxt = Delegate_sampler.clear_outdated_sampling_data ctxt ~new_cycle in
+  let* ctxt =
+    (Stake_storage.clear_at_cycle_end
+       ctxt
+       ~new_cycle
+     [@profiler.record_s {verbosity = Notice} "clear stake storage"])
+  in
+  let* ctxt =
+    (Delegate_sampler.clear_outdated_sampling_data
+       ctxt
+       ~new_cycle
+     [@profiler.record_s {verbosity = Notice} "clear outdated sampling data"])
+  in
   (* activate delegate parameters for the cycle to come.  *)
-  let*! ctxt = Delegate_staking_parameters.activate ctxt ~new_cycle in
+  let*! ctxt =
+    (Delegate_staking_parameters.activate
+       ctxt
+       ~new_cycle
+     [@profiler.record_s {verbosity = Notice} "activate staking parameters"])
+  in
   (* updating AI coefficient. It should remain after all balance changes of the
      cycle-end operations *)
   let* ctxt =
-    Adaptive_issuance_storage.update_stored_rewards_at_cycle_end ctxt ~new_cycle
+    (Adaptive_issuance_storage.update_stored_rewards_at_cycle_end
+       ctxt
+       ~new_cycle
+     [@profiler.record_s
+       {verbosity = Notice} "update stored rewards at cycle end"])
   in
   let balance_updates = slashing_balance_updates @ attesting_balance_updates in
   return (ctxt, balance_updates, deactivated_delegates)
diff --git a/src/proto_alpha/lib_protocol/dune b/src/proto_alpha/lib_protocol/dune
index 7fea31a9fe..75d43668c3 100644
--- a/src/proto_alpha/lib_protocol/dune
+++ b/src/proto_alpha/lib_protocol/dune
@@ -23,6 +23,8 @@
  (instrumentation (backend bisect_ppx))
  (libraries
   tezos-protocol-alpha.protocol.environment)
+ (preprocess (pps octez-libs.ppx_profiler))
+ (preprocessor_deps (env_var TEZOS_PPX_PROFILER))
  (library_flags (:standard -linkall))
  (flags
   (:standard)
diff --git a/src/proto_alpha/lib_protocol/init_storage.ml b/src/proto_alpha/lib_protocol/init_storage.ml
index 2eeb17665d..1202879935 100644
--- a/src/proto_alpha/lib_protocol/init_storage.ml
+++ b/src/proto_alpha/lib_protocol/init_storage.ml
@@ -221,31 +221,55 @@ let prepare_first_block chain_id ctxt ~typecheck_smart_contract
         (* Start of Alpha stitching. Comment used for automatic snapshot *)
     | Alpha ->
         let* ctxt =
-          Storage.Tenderbake.First_level_of_protocol.update ctxt level
+          (Storage.Tenderbake.First_level_of_protocol.update
+             ctxt
+             level
+           [@profiler.record_s
+             {verbosity = Notice} "Tenderbake.First_level_of_protocol.update"])
         in
         (* Migration of refutation games needs to be kept for each protocol. *)
         let* ctxt =
-          Sc_rollup_refutation_storage.migrate_clean_refutation_games ctxt
+          (Sc_rollup_refutation_storage.migrate_clean_refutation_games
+             ctxt
+           [@profiler.record_s
+             {verbosity = Notice}
+               "Sc_rollup_refutation_storage.migrate_clean_refutation_games"])
         in
         return (ctxt, [])
         (* End of Alpha stitching. Comment used for automatic snapshot *)
         (* Start of alpha predecessor stitching. Comment used for automatic snapshot *)
     | T024 ->
         let* ctxt =
-          Storage.Tenderbake.First_level_of_protocol.update ctxt level
+          (Storage.Tenderbake.First_level_of_protocol.update
+             ctxt
+             level
+           [@profiler.record_s
+             {verbosity = Notice} "Tenderbake.First_level_of_protocol.update"])
         in
         (* Migration of refutation games needs to be kept for each protocol. *)
         let* ctxt =
-          Sc_rollup_refutation_storage.migrate_clean_refutation_games ctxt
+          (Sc_rollup_refutation_storage.migrate_clean_refutation_games
+             ctxt
+           [@profiler.record_s
+             {verbosity = Notice}
+               "Sc_rollup_refutation_storage.migrate_clean_refutation_games"])
         in
         return (ctxt, [])
     (* End of alpha predecessor stitching. Comment used for automatic snapshot *)
   in
   let* ctxt =
-    List.fold_left_es patch_script ctxt Legacy_script_patches.addresses_to_patch
+    (List.fold_left_es
+       patch_script
+       ctxt
+       Legacy_script_patches.addresses_to_patch
+     [@profiler.record_s {verbosity = Notice} "patch_script"])
   in
   let*? balance_updates = Receipt_repr.group_balance_updates balance_updates in
   let*! ctxt =
-    Storage.Pending_migration.Balance_updates.add ctxt balance_updates
+    (Storage.Pending_migration.Balance_updates.add
+       ctxt
+       balance_updates
+     [@profiler.record_s
+       {verbosity = Notice} "Storage.Pending_migration.Balance_updates.add"])
   in
   return ctxt
diff --git a/src/proto_alpha/lib_protocol/raw_context.ml b/src/proto_alpha/lib_protocol/raw_context.ml
index c501d7fc16..00e5338465 100644
--- a/src/proto_alpha/lib_protocol/raw_context.ml
+++ b/src/proto_alpha/lib_protocol/raw_context.ml
@@ -1628,12 +1628,12 @@ let prepare_first_block ~level ~timestamp chain_id ctxt =
     (* End of alpha predecessor stitching. Comment used for automatic snapshot *)
   in
   let+ ctxt =
-    prepare
+    (prepare
       ctxt
       ~level
       ~predecessor_timestamp:timestamp
       ~timestamp
-      ~all_bakers_attest_first_level:None
+      ~all_bakers_attest_first_level:None [@profiler.record_s {verbosity = Notice} "Prepare"])
   in
   (previous_proto, previous_proto_constants, ctxt)
 
diff --git a/src/proto_alpha/lib_protocol/script_cache.ml b/src/proto_alpha/lib_protocol/script_cache.ml
index 35cc6b5178..5c679ad606 100644
--- a/src/proto_alpha/lib_protocol/script_cache.ml
+++ b/src/proto_alpha/lib_protocol/script_cache.ml
@@ -98,15 +98,16 @@ let find ctxt addr =
   | Some (unparsed_script, ex_script) ->
       return (ctxt, identifier, Some (unparsed_script, ex_script))
   | None -> (
-      let* ctxt, result = load_and_elaborate ctxt addr in
-      match result with
-      | None -> return (ctxt, identifier, None)
-      | Some (unparsed_script, script_ir, size) ->
-          let cached_value = (unparsed_script, script_ir) in
-          let*? ctxt =
-            Cache.update ctxt identifier (Some (cached_value, size))
-          in
-          return (ctxt, identifier, Some (unparsed_script, script_ir)))
+      (let* ctxt, result = load_and_elaborate ctxt addr in
+       match result with
+       | None -> return (ctxt, identifier, None)
+       | Some (unparsed_script, script_ir, size) ->
+           let cached_value = (unparsed_script, script_ir) in
+           let*? ctxt =
+             Cache.update ctxt identifier (Some (cached_value, size))
+           in
+           return (ctxt, identifier, Some (unparsed_script, script_ir)))
+      [@profiler.record_s {verbosity = Notice} "cache_miss"])
 
 let update ctxt identifier updated_script approx_size =
   Cache.update ctxt identifier (Some (updated_script, approx_size))
diff --git a/src/proto_alpha/lib_protocol/script_interpreter.ml b/src/proto_alpha/lib_protocol/script_interpreter.ml
index e098905296..54b1e80d85 100644
--- a/src/proto_alpha/lib_protocol/script_interpreter.ml
+++ b/src/proto_alpha/lib_protocol/script_interpreter.ml
@@ -1820,7 +1820,7 @@ type execution_result = {
 let execute_any_arg logger ctxt mode step_constants ~entrypoint ~internal
     unparsed_script cached_script arg =
   let open Lwt_result_syntax in
-  let elab_conf =
+  (let elab_conf =
     Script_ir_translator_config.make
       ~legacy:true
       ~keep_extra_types_for_interpreter_logging:(Option.is_some logger)
@@ -1873,9 +1873,10 @@ let execute_any_arg logger ctxt mode step_constants ~entrypoint ~internal
     Script_ir_translator.collect_lazy_storage ctxt storage_type old_storage
   in
   let* (ops, new_storage), ctxt =
-    trace
-      (Runtime_contract_error step_constants.self)
-      (interp logger (ctxt, step_constants) code (arg, old_storage))
+    (trace
+       (Runtime_contract_error step_constants.self)
+       (interp logger (ctxt, step_constants) code (arg, old_storage))
+     [@profiler.record_s {verbosity = Notice} "interprete"])
   in
   let* storage, lazy_storage_diff, ctxt =
     Script_ir_translator.extract_lazy_storage_diff
@@ -1943,7 +1944,7 @@ let execute_any_arg logger ctxt mode step_constants ~entrypoint ~internal
         ticket_receipt;
         address_registry_diff;
       },
-      ctxt )
+      ctxt )) [@profiler.record_s {verbosity = Notice} "execute"]
 
 let execute_with_typed_parameter ?logger ctxt ~cached_script mode step_constants
     ~script ~entrypoint ~parameter_ty ~location ~parameter ~internal =
diff --git a/src/proto_alpha/lib_protocol/script_ir_translator.ml b/src/proto_alpha/lib_protocol/script_ir_translator.ml
index b91d2d8711..60727fae94 100644
--- a/src/proto_alpha/lib_protocol/script_ir_translator.ml
+++ b/src/proto_alpha/lib_protocol/script_ir_translator.ml
@@ -5217,17 +5217,21 @@ let parse_script :
     let* ( Ex_code
              (Code {code; arg_type; storage_type; views; entrypoints; code_size}),
            ctxt ) =
-      parse_code ~unparse_code_rec ~elab_conf ctxt ~code
+      (parse_code
+         ~unparse_code_rec
+         ~elab_conf
+         ctxt
+         ~code [@profiler.record_s {verbosity = Notice} "parse_code"])
     in
     let+ storage, ctxt =
-      parse_storage
-        ~unparse_code_rec
-        ~elab_conf
-        ctxt
-        ~allow_forged_tickets:allow_forged_tickets_in_storage
-        ~allow_forged_lazy_storage_id:allow_forged_lazy_storage_id_in_storage
-        storage_type
-        ~storage
+      (parse_storage
+         ~unparse_code_rec
+         ~elab_conf
+         ctxt
+         ~allow_forged_tickets:allow_forged_tickets_in_storage
+         ~allow_forged_lazy_storage_id:allow_forged_lazy_storage_id_in_storage
+         storage_type
+         ~storage [@profiler.record_s {verbosity = Notice} "parse_storage"])
     in
     ( Ex_script
         (Script
@@ -5926,15 +5930,15 @@ let list_of_big_map_ids ids =
 
 let parse_data ~elab_conf ctxt ~allow_forged_tickets
     ~allow_forged_lazy_storage_id ty t =
-  parse_data
-    ~unparse_code_rec
-    ~elab_conf
-    ~allow_forged_tickets
-    ~allow_forged_lazy_storage_id
-    ~stack_depth:0
-    ctxt
-    ty
-    t
+  (parse_data
+     ~unparse_code_rec
+     ~elab_conf
+     ~allow_forged_tickets
+     ~allow_forged_lazy_storage_id
+     ~stack_depth:0
+     ctxt
+     ty
+     t [@profiler.record_s {verbosity = Notice} "parse_data"])
 
 let parse_view ~elab_conf ctxt ty view =
   parse_view ~unparse_code_rec ~elab_conf ctxt ty view
-- 
2.51.0

